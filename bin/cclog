#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const project_manager_1 = require("./core/project-manager");
const session_parser_1 = require("./core/session-parser");
const interactive_selector_1 = require("./ui/interactive-selector");
const renderer_1 = require("./ui/renderer");
const colors_1 = require("./ui/colors");
const child_process_1 = require("child_process");
async function main() {
    const args = process.argv.slice(2);
    const command = args[0];
    try {
        if (command === "projects" || command === "p") {
            await showProjects();
        }
        else if (command === "view" || command === "v") {
            if (!args[1]) {
                console.error(colors_1.colors.error("Usage: cclog view <session-file>"));
                process.exit(1);
            }
            await viewSession(args[1]);
        }
        else if (command === "info" || command === "i") {
            if (!args[1]) {
                console.error(colors_1.colors.error("Usage: cclog info <session-file>"));
                process.exit(1);
            }
            await showSessionInfo(args[1]);
        }
        else if (command === "help" ||
            command === "h" ||
            command === "--help" ||
            command === "-h") {
            showHelp();
        }
        else {
            await showSessions();
        }
    }
    catch (error) {
        console.error(colors_1.colors.error("Error:"), error instanceof Error ? error.message : "Unknown error");
        process.exit(1);
    }
}
async function showSessions() {
    const projectManager = new project_manager_1.ProjectManager();
    const sessions = await projectManager.getCurrentProjectSessions();
    if (sessions.length === 0) {
        console.log("No sessions found for this project");
        return;
    }
    const headerItems = [
        {
            display: "Claude Code Sessions for: " + process.cwd(),
            searchText: "",
            value: "",
        },
        {
            display: "Enter: Return session ID, Ctrl+C: Exit",
            searchText: "",
            value: "",
        },
        {
            display: "CREATED             MESSAGES  FIRST_MESSAGE",
            searchText: "",
            value: "",
        },
    ];
    const sessionItems = sessions.map((session) => ({
        display: (0, renderer_1.renderSessionList)(session),
        searchText: `${session.sessionId} ${session.firstUserMessage}`,
        value: session.sessionId,
    }));
    const allItems = [...headerItems, ...sessionItems];
    const selector = new interactive_selector_1.InteractiveSelector(allItems, {
        height: 20,
        headerLines: 3,
        preview: (item) => {
            if (headerItems.includes(item))
                return "";
            const session = sessions.find((s) => s.sessionId === item.value);
            return session ? (0, renderer_1.renderSessionInfo)(session) : "";
        },
    });
    const selected = await selector.show();
    if (selected && !headerItems.includes(selected)) {
        if (selected.action === "view") {
            const session = sessions.find((s) => s.sessionId === selected.value);
            if (session) {
                await viewSession(session.filePath);
            }
        }
        else if (selected.action === "path") {
            const session = sessions.find((s) => s.sessionId === selected.value);
            if (session) {
                console.log(session.filePath);
            }
        }
        else {
            console.log(selected.value);
        }
    }
}
async function showProjects() {
    const projectManager = new project_manager_1.ProjectManager();
    const projects = await projectManager.getAllProjects();
    if (projects.length === 0) {
        console.log("No Claude projects found");
        return;
    }
    const headerItems = [
        {
            display: "Claude Code Projects (sorted by recent activity)",
            searchText: "",
            value: "",
        },
        { display: "Enter: Show project path", searchText: "", value: "" },
        {
            display: "LAST_ACTIVE  SESSIONS  PROJECT_PATH",
            searchText: "",
            value: "",
        },
    ];
    const projectItems = projects.map((project) => ({
        display: (0, renderer_1.renderProjectList)(project),
        searchText: project.path,
        value: project.path,
    }));
    const allItems = [...headerItems, ...projectItems];
    const selector = new interactive_selector_1.InteractiveSelector(allItems, {
        height: 15,
        headerLines: 3,
        preview: (item) => {
            if (headerItems.includes(item))
                return "";
            return `cd ${item.value}`;
        },
    });
    const selected = await selector.show();
    if (selected && !headerItems.includes(selected)) {
        if (selected.action === "view") {
            const proc = (0, child_process_1.spawn)('sh', ['-c', `cd "${selected.value}" && cclog`], {
                stdio: 'inherit',
                cwd: process.cwd()
            });
            proc.on('exit', (code) => process.exit(code ?? 0));
        }
        else if (selected.action === "path") {
            console.log(selected.value);
        }
        else {
            console.log(`cd ${selected.value}`);
        }
    }
}
async function viewSession(filePath) {
    const parser = new session_parser_1.SessionParser(filePath);
    const messages = await parser.parseForDisplay();
    if (messages.length === 0) {
        console.log("No messages found in session");
        return;
    }
    for (const message of messages) {
        console.log((0, renderer_1.renderSessionMessage)(message.type, message.timestamp, message.content, message.isToolUse));
    }
}
async function showSessionInfo(filePath) {
    const parser = new session_parser_1.SessionParser(filePath);
    const session = await parser.parseMinimal();
    console.log((0, renderer_1.renderSessionInfo)(session));
}
function showHelp() {
    console.log(`cclog - Browse Claude Code conversation history

Usage:
  cclog [options]           Browse sessions in current directory
  cclog projects            Browse all projects
  cclog view <session>      View session content
  cclog info <session>      Show session information
  cclog help               Show this help message

Options:
  projects, p                       Browse all projects
  view, v                          View session content
  info, i                          Show session information
  help, h, --help, -h              Show help

Navigation:
  ↑↓ keys                          Navigate list
  Enter                            Select item
  Ctrl+C                           Exit
  Type text                        Filter/search items

Session Actions:
  Enter                            Return session ID
  Ctrl+V                           View session content
  Ctrl+P                           Return file path
  Ctrl+R                           Resume session with claude -r`);
}
process.on("unhandledRejection", (reason, promise) => {
    console.error(colors_1.colors.error("Unhandled Rejection at:"), promise, colors_1.colors.error("reason:"), reason);
    process.exit(1);
});
process.on("uncaughtException", (error) => {
    console.error(colors_1.colors.error("Uncaught Exception:"), error);
    process.exit(1);
});
main();
//# sourceMappingURL=index.js.map